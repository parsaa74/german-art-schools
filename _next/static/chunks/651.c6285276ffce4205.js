"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[651],{1651:function(e,n,t){t.r(n),t.d(n,{default:function(){return f}});var r=t(7437),o=t(2265),i=t(6375),a=t(2860);let s={uniforms:{time:{value:0},resolution:{value:new i.Vector2},baseColor:{value:new i.Color("#050520")},accentColor:{value:new i.Color("#1a0040")}},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragmentShader:"\n    uniform float time;\n    uniform vec2 resolution;\n    uniform vec3 baseColor;\n    uniform vec3 accentColor;\n    varying vec2 vUv;\n\n    float noise(vec2 p) {\n      return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n    }\n\n    float fbm(vec2 p) {\n      float value = 0.0;\n      float amplitude = 0.5;\n      float frequency = 0.0;\n      for(int i = 0; i < 6; i++) {\n        value += amplitude * noise(p);\n        p *= 2.0;\n        amplitude *= 0.5;\n      }\n      return value;\n    }\n\n    void main() {\n      vec2 pos = vUv * 2.0 - 1.0;\n      float dist = length(pos);\n      \n      vec2 q = vec2(0);\n      q.x = fbm(pos + 0.1 * time);\n      q.y = fbm(pos + vec2(1.0));\n      \n      vec2 r = vec2(0);\n      r.x = fbm(pos + 1.0 * q + vec2(1.7, 9.2) + 0.15 * time);\n      r.y = fbm(pos + 1.0 * q + vec2(8.3, 2.8) + 0.126 * time);\n      \n      float f = fbm(pos + r);\n      \n      vec3 color = mix(baseColor, accentColor, f * f);\n      color = mix(color, vec3(0.0), smoothstep(0.0, 2.0, dist));\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  "};function c(){let e=(0,o.useRef)(null),n=(0,o.useRef)(0);return(0,a.F)((t,r)=>{n.current+=.2*r,e.current&&(e.current.uniforms.time.value=n.current)}),(0,r.jsxs)("mesh",{position:[0,0,-50],children:[(0,r.jsx)("planeGeometry",{args:[100,100]}),(0,r.jsx)("shaderMaterial",{ref:e,args:[s],transparent:!0})]})}function u(){let e=(0,o.useRef)(null),n=(0,o.useMemo)(()=>{let e=new Float32Array(3e3);for(let n=0;n<1e3;n++){let t=15+30*Math.random(),r=Math.random()*Math.PI*2,o=Math.random()*Math.PI;e[3*n]=t*Math.sin(o)*Math.cos(r),e[3*n+1]=t*Math.sin(o)*Math.sin(r),e[3*n+2]=t*Math.cos(o)}return e},[]),t=(0,o.useMemo)(()=>new Float32Array(1e3).map(()=>.02+.08*Math.random()),[]);return(0,a.F)((n,t)=>{e.current&&(e.current.rotation.y+=.05*t,e.current.rotation.z+=.03*t)}),(0,r.jsxs)("points",{ref:e,children:[(0,r.jsxs)("bufferGeometry",{children:[(0,r.jsx)("bufferAttribute",{attach:"attributes-position",count:1e3,array:n,itemSize:3}),(0,r.jsx)("bufferAttribute",{attach:"attributes-size",count:1e3,array:t,itemSize:1})]}),(0,r.jsx)("pointsMaterial",{size:.1,color:"#ffffff",transparent:!0,opacity:.4,blending:i.AdditiveBlending,sizeAttenuation:!0,depthWrite:!1})]})}function l(){let e=(0,o.useRef)(null),n=(0,o.useRef)(0);return(0,a.F)((t,r)=>{n.current+=r,e.current&&(e.current.rotation.z=.1*Math.sin(.2*n.current),e.current.position.y=2*Math.sin(.5*n.current))}),(0,r.jsxs)("mesh",{ref:e,position:[0,0,-20],rotation:[0,0,.25*Math.PI],children:[(0,r.jsx)("coneGeometry",{args:[20,40,64,1,!0]}),(0,r.jsx)("meshBasicMaterial",{color:"#090418",transparent:!0,opacity:.1,side:i.BackSide,blending:i.AdditiveBlending})]})}function f(){return(0,r.jsxs)("group",{children:[(0,r.jsx)(c,{}),(0,r.jsx)(u,{}),(0,r.jsx)(l,{}),(0,r.jsx)("fog",{attach:"fog",args:["#000005",20,90]}),(0,r.jsx)("ambientLight",{intensity:.1}),(0,r.jsx)("pointLight",{position:[10,10,10],intensity:.2,color:"#4400ff"}),(0,r.jsx)("pointLight",{position:[-10,-10,-10],intensity:.1,color:"#000066"})]})}}}]);